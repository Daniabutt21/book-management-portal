name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: file:./test.db

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test
        env:
          DATABASE_URL: file:./test.db
          JWT_SECRET: test-secret-key-for-ci
          JWT_EXPIRES_IN: 7d
          NODE_ENV: test

      - name: Build backend
        working-directory: ./backend
        run: npm run build

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

      - name: Check for build errors
        working-directory: ./frontend
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: book-management-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: book-management-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint-check:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Check backend formatting
        working-directory: ./backend
        run: npx prettier --check "src/**/*.ts"
        continue-on-error: true

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check TypeScript types (Frontend)
        working-directory: ./frontend
        run: npx tsc --noEmit
        continue-on-error: true
